const _    = require('lodash');
const page = require('webpage').create();

const urlFilter  = require('./lib/urlFilter.js');
const userAgents = require('./lib/userAgentList.js');
const tracer     = require('./lib/crawlStats.js');

const config     = require('config');
const onPageTime = config.phantomjs.onPageTime;
const domain     = config.phantomjs.domain;

page.settings.userAgent = _.sample(userAgents);

//reject all site resources except those matching domain
page.onResourceRequested = (requestData, networkRequest) => {
    let reqUrl = requestData.url;
    if (!urlFilter.filterUselessLinks(reqUrl, domain)) networkRequest.abort();
};

// ignore errors, do not print them
// we reject all site dependencies here
// so expect lot of inline jQuery errors
// and stuff like that :)
page.onError = function(msg, trace) {};

forward(domain);

function forward(url) {
    //stay talkative to please upstream guardian
    console.log('PhantomJs', url)

    page.open(url, function(status) {
        //prints current actions and stats
        console.log(status, url);
        console.log(JSON.stringify(tracer.stats, null, 4));

        if (status !== 'success') phantom.exit(1);

        let linksArr = page.evaluate(() => [].map.call(document.querySelectorAll('a'), link => link.getAttribute('href')));
        let newUrl = urlFilter.getSingleLink(linksArr, domain);

        //if stucked(old newUrl is same as new one) go back to domain root
        let dest = (url === newUrl)
            ? domain
            : newUrl;

        (url === newUrl)
            ? tracer.resetCurrentCrawlCounter()
            : tracer.updateCurrentCrawlCounter();

        const timeToLeave = _.random(onPageTime.low, onPageTime.high);

        tracer.updateTotalCounter();

        setTimeout(() => forward(dest), timeToLeave);
    });
}


