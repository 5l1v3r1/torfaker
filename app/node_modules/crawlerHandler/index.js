const childProcess = require('child_process');

const phantomjs = require('phantomjs-prebuilt');
const binPath = phantomjs.path;

const time = require('time');
const logger = require('logger');
const config = require('config');

module.exports = {
    spawn: function(port) {
        const childArgs = [...config.phantomjs.args, `--proxy=127.0.0.1:${port}`, `${process.env.NODE_PATH}/${config.phantomjs.file}`]

        const browserProcess = childProcess.execFile(binPath, childArgs, function(err, stdout, stderr) {
            logger.info('PID:', browserProcess.pid, err, stderr);
        });

        browserProcess.stderr.on('data', function (data) {
            logger.error('PID:', browserProcess.pid, data);
        });

        browserProcess.on('close', function (code) {
            logger.info('PID:', browserProcess.pid, 'Exit code:', code);
        });

        browserProcess.on('exit', function (code) {
            throw new Error(`phantomjs exit with code ${code}, please restart TOR...`);
        });

        //@TODO: throw error when phantomjs is down...
        const timeOut = config.phantomjs.maxConnectionTime;
        let timeStamp;

        browserProcess.stdout.on('data', function(data) {
            logger.info('PID:', browserProcess.pid, data);

            timeStamp = time.getUnixTimeStamp();

            const isSilent = () => {
                // console.log(time.getUnixTimeStamp() - timeStamp);
                // console.log(( (time.getUnixTimeStamp() - timeStamp) > (timeOut/1000)));

                if ((time.getUnixTimeStamp() - timeStamp) > (timeOut/1000) - 5) {
                    throw new Error('Phantomjs seems to be silent, restart app... ');
                } else {
                    timeStamp = time.getUnixTimeStamp();
                }
            }

            setTimeout(isSilent, timeOut);
        });

        return browserProcess;
    }
};
